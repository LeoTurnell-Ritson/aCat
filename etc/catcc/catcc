#!/bin/bash
## ############################# aCat ################################ ##
##
## @file catcc
## @description
##
## @author Copyright (C) 2023  Leo Turnell-Ritson
## @version 0.1
##
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA.
##
## #################################################################### ##


get_relative_path() {
    local file_path="$1"
    local exclude_path="$2"
    absolute_path=$(realpath "$file_path")
    result_path=${absolute_path#$exclude_path}
    echo "$result_path"
}

get_first_directory() {
    local path="$1"
    if [[ "$path" != /* ]]; then
        path="/$path"
    fi
    directory=$(dirname "$path")
    first_directory=$(echo "$directory" | cut -d "/" -f2)
    echo "$first_directory"
}

remove_leading_slash() {
    local path="$1"
    if [[ "$path" == /* ]]; then
        path="${path:1}"
    fi
    echo "$path"
}

remove_first_directory() {
    local path=$(remove_leading_slash "$1")
    local new_directory=$(echo "$path" | sed 's|^[^/]\+||')
    echo $(remove_leading_slash "$new_directory")
}

check_extension() {
    local file_path="$1"
    local target_extension="$2"
    file_extension="${file_path##*.}"
    if [ "$file_extension" == "$target_extension" ]; then
        return 0
    else
        return 1
    fi
}

throw_error() {
    echo "$1"
    exit 1
}

find_files_by_extension() {
    local folder="$1"
    local extension="$2"
    find "$folder" -type f -name "*.$extension"
}


print_and_execute_command() {
    local command_to_execute="$1"
    echo "Executing command: $command_to_execute"
    eval "$command_to_execute"
}

build_binary() {
    local path="$1"
    filename=$(basename "$path")
    filename_without_extension="${filename%.*}"
    local build_path="$2"
    $CAT_COMPILER  \
        $path \
        -c \
        -o $build_path/$filename_without_extension.o \
        $CAT_COMPILER_STANDARD \
        $CAT_COMPILER_WARNING \
        $CAT_COMPILER_OPTIMISATION \
        $CAT_COMPILER_INCLUDE
}

build_executable() {
    local path="$1"
    filename=$(basename "$path")
    filename_without_extension="${filename%.*}"
    local bin_path="$2"
    local build_path="$3"
    objects=$(find_files_by_extension "$build_path" "o")
    $CAT_COMPILER \
        -o $bin_path/$filename_without_extension.cat \
        $objects \
        $CAT_COMPILER_STANDARD \
        $CAT_COMPILER_WARNING \
        $CAT_COMPILER_OPTIMISATION \
        $CAT_COMPILER_INCLUDE
}

## #################################################################### ##

# Function to display usage information
display_usage() {
    echo "Usage: $0 [-c] file"
    echo "Options:"
    echo "  -c "
}

make_obj=false
while getopts ":c" opt; do
    case $opt in
        c)
            make_obj=true
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            display_usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

CAT_COMPILER_INCLUDE="-lm -fopenmp \
            -I$CAT_INST_DIR/$CAT_PROJECT_NAME/$CAT_INCLUDE "
CAT_COMPILER_OPTIMISATION="-O3"
CAT_COMPILER="mpicc"
CAT_COMPILER_STANDARD="-std=c90"
CAT_COMPILER_WARNING="\
            -Wall -Wextra  -Wcast-align -Wshadow  -Wpointer-arith \
            -Wcast-qual -Wno-missing-braces  -Wunreachable-code \
            -Wfloat-equal  -Wno-missing-field-initializers"

SOURCE=$1
SOURCE_RPTH=$(get_relative_path "$SOURCE" "$CAT_INST_DIR/$CAT_PROJECT_NAME")
SOURCE_LPTH=$(get_first_directory "$SOURCE_RPTH")

#if [[ "$SOURCE_LPTH" == "$CAT_SRC" ]]; then
if [[ "$make_obj" == true ]]; then
    check_extension "$SOURCE" "c"
    CHECK="$?"
    if [ $CHECK -eq 0 ]; then
        BUILD_PATH=$(dirname $(remove_first_directory "$SOURCE_RPTH"))
        mkdir -p  "$CAT_INST_DIR/$CAT_PROJECT_NAME/$CAT_BUILD/$BUILD_PATH"
        build_binary "$SOURCE" "$CAT_INST_DIR/$CAT_PROJECT_NAME/$CAT_BUILD/$BUILD_PATH"
    else
        throw_error "$0: error: Extension not recognised for build files."
    fi
else
    check_extension "$SOURCE" "c"
    CHECK="$?"
    if [ $CHECK -eq 0 ]; then
        TEMP_PATH="temporary"

        mkdir -p  "$CAT_INST_DIR/$CAT_PROJECT_NAME/$CAT_BUILD/$TEMP_PATH"
        build_binary "$SOURCE" "$CAT_INST_DIR/$CAT_PROJECT_NAME/$CAT_BUILD/$TEMP_PATH"

        mkdir -p  "$CAT_INST_DIR/$CAT_PROJECT_NAME/$CAT_BIN"
        build_executable "$SOURCE" \
                         "$CAT_INST_DIR/$CAT_PROJECT_NAME/$CAT_BIN/"  \
                         "$CAT_INST_DIR/$CAT_PROJECT_NAME/$CAT_BUILD/"

        rm -r "$CAT_INST_DIR/$CAT_PROJECT_NAME/$CAT_BUILD/$TEMP_PATH"
    else
        throw_error "$0: error: Extension not recognised for bin files."
    fi
fi



## #################################################################### ##
